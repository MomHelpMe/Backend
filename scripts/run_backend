#!/bin/sh

# TEST: 개발 시 로컬 실행용
cd "$(dirname "$0")/.."
cp .env.local .env

# Initialize the environment (arg 1 to clear everything)
if [ "$1" == "1" ]; then
  ./scripts/clean
fi

# Run the web server
if [ -z "$(docker ps -aq -f name=nginx)" ]; then
  sh nginx/make_config local
  docker build -t nginx nginx/
  docker run -d -p 443:443 --name nginx nginx
fi

# Check if the container is not running
if [ -z "$(docker ps -aq -f name=postgres)" ]; then
  docker volume create transcendence_db_data
  docker build -t postgres db/
  docker run -d -p 5432:5432 --name postgres --env-file .env -v transcendence_db_data:/var/lib/postgresql/data postgres
fi

ENV_DIR=".venv"
DOT_ENV_FILE=".env"

cd backend

cp ../$DOT_ENV_FILE .
echo "Copied $DOT_ENV_FILE."
sed -i '' 's/^DB_HOST=.*$/DB_HOST=localhost/' .env

# TEST: .env 파일의 변수들을 환경 변수로 설정 (슈퍼 유저를 생성하기 위해 필요)
if [ -f "$DOT_ENV_FILE" ]; then
  export $(grep -v '^#' $DOT_ENV_FILE | xargs)
  echo "Exported .env variables to environment."
else
  echo ".env file not found."
  exit 1
fi

if [ ! -d "$ENV_DIR" ]; then
  python3 -m venv $ENV_DIR
  echo "Virtual environment created at $ENV_DIR."
else
  echo "Virtual environment already exists at $ENV_DIR."
fi

source $ENV_DIR/bin/activate
echo "Virtual environment activated."

python3 -m pip install -q --upgrade pip
if [ -f "requirements.txt" ]; then
  cnt=$(python3 -m pip freeze | grep -f requirements.txt | wc -l)
  if [ $cnt -lt $(cat requirements.txt | wc -l) ]; then
      python3 -m pip install -q -r requirements.txt
      echo "Installed packages from requirements.txt."
  else
    echo "Packages from requirements.txt are already installed."
  fi
else
  echo "requirements.txt not found."
  exit 1
fi

echo "Applying migrations..."
python3 manage.py makemigrations
python3 manage.py migrate

# Create a superuser
DJANGO_SUPERUSER_USERNAME=$DJANGO_SUPERUSER_USERNAME
DJANGO_SUPERUSER_PASSWORD=$DJANGO_SUPERUSER_PASSWORD
DJANGO_SUPERUSER_EMAIL=$DJANGO_SUPERUSER_EMAIL

USER_EXISTS=$(python3 manage.py shell -c "
from django.contrib.auth import get_user_model;
User = get_user_model();
print(User.objects.filter(username='admin').exists())
")

if [ "$USER_EXISTS" = "False" ]; then
  echo "Creating superuser..."
  python3 manage.py createsuperuser --username $DJANGO_SUPERUSER_USERNAME --email $DJANGO_SUPERUSER_EMAIL --noinput || true
fi

echo "Starting development server..."
# clear

python3 manage.py runserver 0.0.0.0:8000
