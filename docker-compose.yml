services:
    db:
        build: ./db
        image: postgres:trancendence
        container_name: postgres
        restart: on-failure
        environment:
            - POSTGRES_USER=${POSTGRES_USER}
            - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
            - DB_NAME=${DB_NAME}
            - DB_USER=${DB_USER}
            - DB_PASSWORD=${DB_PASSWORD}
        expose:
            - "5432"
        volumes:
            - db_data:/var/lib/postgresql/data/
        networks:
            - network
        healthcheck:
            test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${DB_NAME}"]
            interval: 10s
            timeout: 5s
            retries: 5

    backend:
        depends_on:
            db:
                condition: service_healthy
        build: ./backend
        image: backend:trancendence
        container_name: backend
        env_file:
            - .env
        restart: on-failure
        # TEST: 테스트를 위해 포트를 열어둠
        ports:
            - "8000:8000"
        networks:
            - network
        healthcheck:
            test: ["CMD-SHELL", "curl -f http://localhost:8000/ || exit 1"]
            interval: 30s
            retries: 3
            start_period: 30s
            timeout: 10s

    frontend:
        build: ./frontend
        image: frontend:trancendence
        container_name: frontend
        restart: on-failure
        networks:
            - network
        healthcheck:
            test: ["CMD-SHELL", "curl -f http://localhost:5173/ || exit 1"]
            interval: 30s
            retries: 3
            start_period: 30s
            timeout: 10s

    nginx:
        depends_on:
            backend:
                condition: service_healthy
            frontend:
                condition: service_healthy
        build: ./nginx
        image: nginx:trancendence
        container_name: nginx
        restart: on-failure
        ports:
            - "80:80"
        volumes:
            - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
        networks:
            - network

volumes:
    db_data:

networks:
    network:
        driver: bridge
